#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright 2025 Firefly Software Solutions Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Generated by Firefly Rule Engine Python Compiler
# Made with ‚ù§Ô∏è by Firefly Software Solutions Inc
# Compilation Date: 2025-09-15T14:24:16.037726+02:00
#
# Rule: B2B Credit Scoring Platform
# Description: Comprehensive business credit assessment using multiple data sources
# Version: 1.0.0
#

from firefly_runtime import *


def b2b_credit_scoring(context):
    """
    Rule: B2B Credit Scoring Platform
    Comprehensive business credit assessment using multiple data sources
    
    Args:
        context (dict): Execution context with input variables
    
    Returns:
        dict: Output variables
    """
    # Initialize constants from database or default values
    # NOTE: Constants marked as 'None' need to be configured in the database
    #       or updated manually before execution
    constants = {}
    constants['MIN_BUSINESS_CREDIT_SCORE'] = 650  # Default value
    constants['EXCELLENT_CREDIT_THRESHOLD'] = 750  # Default value
    constants['MAX_DEBT_TO_INCOME_RATIO'] = 0.4  # Default value
    constants['MIN_DEBT_SERVICE_COVERAGE'] = 1.25  # Default value
    constants['MAX_LOAN_TO_VALUE_RATIO'] = 0.8  # Default value
    constants['MIN_YEARS_IN_BUSINESS'] = 2  # Default value
    constants['MIN_ANNUAL_REVENUE'] = 100000  # Default value

    # Sub-rule: Data Validation and Preparation
    if bool(firefly_is_not_empty(context.get('businessId', ''))) and bool(firefly_is_positive(context.get('requestedAmount', 0))) and bool(firefly_is_positive(context.get('annualRevenue', ''))) and bool(firefly_is_valid_credit_score(context.get('businessCreditScore', 0))) and bool(firefly_is_valid_credit_score(context.get('ownerCreditScore', 0))):
        context['monthly_revenue_valid'] = firefly_is_positive(context.get('monthlyRevenue', ''))
        context['monthly_expenses_valid'] = firefly_is_positive(context.get('monthlyExpenses', ''))
        context['existing_debt_valid'] = firefly_is_not_null(context.get('existingDebt', 0))
        context['has_complete_financial_data'] = ((context.get('monthly_revenue_valid', '')  and  context.get('monthly_expenses_valid', ''))  and  context.get('existing_debt_valid', 0))
        context['debt_to_income_ratio'] = (context.get('monthlyDebtPayments', 0) / context.get('monthlyRevenue', ''))
        context['data_validation_complete'] = context.get('has_complete_financial_data', '')
        if bool(context.get('data_validation_complete', '')):
            context['validation_status'] = "PASSED"
        if (not bool(context.get('data_validation_complete', ''))):
            context['validation_status'] = "FAILED"
    else:
        context['data_validation_complete'] = False
        context['validation_status'] = "FAILED"

    # Return output variables
    return {
        'validation_status': context.get('validation_status'),
        'data_validation_complete': context.get('data_validation_complete'),
        'debt_to_income_ratio': context.get('debt_to_income_ratio'),
        'has_complete_financial_data': context.get('has_complete_financial_data'),
    }


def test_b2b_credit_scoring():
    """Test the compiled B2B credit scoring rule with sample data"""
    print("üî• Testing Compiled B2B Credit Scoring Rule")
    print("="*60)
    
    # Test case 1: Valid business with good credit
    print("\n‚úÖ Test Case 1: Valid business with good credit")
    context1 = {
        'businessId': 'BIZ123',
        'requestedAmount': 100000,
        'annualRevenue': 500000,
        'businessCreditScore': 750,
        'ownerCreditScore': 780,
        'monthlyRevenue': 41667,  # 500k/12
        'monthlyExpenses': 30000,
        'existingDebt': 50000,
        'monthlyDebtPayments': 2500
    }
    
    result1 = b2b_credit_scoring(context1)
    print(f"  Result: {result1}")
    
    # Test case 2: Invalid business (missing required data)
    print("\n‚ùå Test Case 2: Invalid business (missing required data)")
    context2 = {
        'businessId': '',  # Empty business ID
        'requestedAmount': 100000,
        'annualRevenue': 500000,
        'businessCreditScore': 750,
        'ownerCreditScore': 780
    }
    
    result2 = b2b_credit_scoring(context2)
    print(f"  Result: {result2}")
    
    # Test case 3: Poor credit scores
    print("\n‚ö†Ô∏è  Test Case 3: Poor credit scores")
    context3 = {
        'businessId': 'BIZ456',
        'requestedAmount': 50000,
        'annualRevenue': 200000,
        'businessCreditScore': 500,  # Poor credit
        'ownerCreditScore': 520,     # Poor credit
        'monthlyRevenue': 16667,
        'monthlyExpenses': 15000,
        'existingDebt': 30000,
        'monthlyDebtPayments': 1500
    }
    
    result3 = b2b_credit_scoring(context3)
    print(f"  Result: {result3}")
    
    print("\nüéâ All tests completed!")
    print("="*60)


if __name__ == "__main__":
    test_b2b_credit_scoring()
