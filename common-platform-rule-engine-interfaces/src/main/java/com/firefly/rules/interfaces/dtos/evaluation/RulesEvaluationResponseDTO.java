/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.firefly.rules.interfaces.dtos.evaluation;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Map;

/**
 * Response DTO for rules evaluation operations.
 * Contains the result of rules evaluation including output data and execution details.
 * Supports both single rule and multiple rules evaluation scenarios.
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "Response from rules evaluation containing results and output data")
public class RulesEvaluationResponseDTO {

    /**
     * Whether the rules evaluation was successful
     */
    @NotNull(message = "Success flag is required")
    @Schema(description = "Whether the rules evaluation was successful", example = "true")
    private Boolean success;

    /**
     * The result of the main condition evaluation
     */
    @Schema(description = "The result of the main condition evaluation", example = "true")
    private Boolean conditionResult;

    /**
     * Output data generated by the rules
     */
    @Size(max = 1000, message = "Output data cannot contain more than 1000 entries")
    @Schema(description = "Output data generated by the rules. Contains computed variables in snake_case format (e.g., debt_to_income, credit_tier, is_eligible).",
            example = "{\"credit_tier\": \"PRIME\", \"is_eligible\": true, \"debt_to_income\": 0.33, \"risk_score\": 85, \"approval_status\": \"APPROVED\"}")
    private Map<String, Object> outputData;

    /**
     * Whether the circuit breaker was triggered
     */
    @Schema(description = "Whether the circuit breaker was triggered", example = "false")
    private Boolean circuitBreakerTriggered;

    /**
     * Circuit breaker message if triggered
     */
    @Size(max = 500, message = "Circuit breaker message cannot exceed 500 characters")
    @Schema(description = "Circuit breaker message if triggered", example = "High risk transaction detected")
    private String circuitBreakerMessage;

    /**
     * Error message if evaluation failed
     */
    @Size(max = 1000, message = "Error message cannot exceed 1000 characters")
    @Schema(description = "Error message if evaluation failed", example = "Variable 'customer_age' not found")
    private String error;

    /**
     * Execution time in milliseconds
     */
    @Min(value = 0, message = "Execution time cannot be negative")
    @Schema(description = "Execution time in milliseconds", example = "25")
    private Long executionTimeMs;

    /**
     * Additional metadata about the evaluation
     */
    @Size(max = 100, message = "Metadata cannot contain more than 100 entries")
    @Schema(description = "Additional metadata about the evaluation",
            example = "{\"rulesId\": \"rules-123\", \"rulesName\": \"Premium Discount\"}")
    private Map<String, Object> metadata;
}
